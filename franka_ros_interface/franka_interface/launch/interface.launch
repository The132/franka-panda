<?xml version="1.0" ?>
<launch>
  <rosparam command="load" file="$(find franka_ros_controllers)/config/ros_controllers.yaml" ns="/franka_ros_interface"/>
  <arg name="load_gripper" default="true" />
  <arg name="rate" default="1000" />
  <arg name="start_controllers" default="true" />
  <arg name="start_moveit" default="true" />
  <arg name="fake_execution" default="false" /> <!-- Only valid if running moveit movegroup (start_moveit:=true) -->
  <arg name="load_demo_planning_scene" default="true"/>
  <arg name="use_forcesensor" default="false"/>

  <!-- Panda Control Interface -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find franka_panda_description)/robots/panda_arm_hand.urdf.xacro'" if="$(arg load_gripper)" />
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find franka_panda_description)/robots/panda_arm.urdf.xacro'" unless="$(arg load_gripper)" />

  <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
    <arg name="robot_ip" value="$(env FRANKA_ROBOT_IP)" />
  </include>

  <!-- Start the custom_franka_control_node for advertising controller services and starting custom controller manager-->
  <rosparam command="load" file="$(find franka_interface)/config/robot_config.yaml"/>
  <param name="/robot_config/robot_ip" type="str" value="$(env FRANKA_ROBOT_IP)" />
  <node name="franka_control" pkg="franka_interface" type="custom_franka_control_node" output="screen" required="true" >
    <!-- <rosparam command="load" file="$(find franka_control)/config/custom_franka_control_node.yaml" /> -->
    <!-- <param name="robot_ip" value="$(env FRANKA_ROBOT_IP)" /> -->
    <param name="publish_frequency" value="$(arg rate)"/>
  </node>

  <!-- Start the custom state publisher for franka_ros_interface -->
  <rosparam command="load" file="$(find franka_interface)/config/basic_controllers.yaml"/>
  <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_ros_interface/custom_franka_state_controller" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
    <param name="publish_frequency" value="$(arg rate)"/>
  </node>
  <!-- Start joint_state_publisher with the joint states of the robot -->
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states] </rosparam>
    <param name="rate" value="$(arg rate)"/>
  </node>
  <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired] </rosparam>
    <param name="rate" value="$(arg rate)"/>
    <remap from="/joint_states" to="/joint_states_desired" />
  </node>

  <node name="controllers" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="position_joint_trajectory_controller"/>

  <!-- Load the custom controllers -->
  <group if="$(eval arg('start_controllers') == true)">
    <node name="load_controllers" pkg="controller_manager" type="controller_manager" respawn="false"
                      output="screen" args="load
                                           franka_ros_interface/effort_joint_impedance_controller
                                           franka_ros_interface/effort_joint_position_controller
                                           franka_ros_interface/effort_joint_torque_controller
                                           franka_ros_interface/velocity_joint_velocity_controller
                                           franka_ros_interface/position_joint_position_controller"/>
  </group>

  <node pkg="tf" type="static_transform_publisher" name="base_to_link0" args="0 0 0 0 0 0 1 base panda_link0 100" />                                                                      
  <node pkg="tf" type="static_transform_publisher" name="world_to_base" args="0 0 0 0 0 0 1 world base 100" />                                                                      
  <group if="$(eval arg('start_moveit') == true)">
    <include file="$(find panda_moveit_config)/launch/move_group.launch">
      <arg name="fake_execution" value="$(arg fake_execution)" />
      <arg name="load_gripper" value="$(arg load_gripper)" />
      <arg name="info" value="true" />
    </include>
    <group if="$(eval arg('load_demo_planning_scene') == true)">
      <node name="demo_scene_loader" pkg="franka_moveit" type="create_demo_planning_scene.py" respawn="false" output="screen" />
    </group>
  </group>   


  <group if="$(arg use_forcesensor)">
    <node name="force_sensor_publish_node" pkg="forcesensor" type="publish" respawn="false" output="screen" />
  </group>

</launch>


